// src/models/index.ts
import sequelize from './config/database';
import { setupAssociations } from './models/associations';
import express, { Request, Response } from 'express';
// import { syncDatabase } from '../src/scripts/syncDatabase'; // Importa a fun√ß√£o de sincroniza√ß√£o

// Classe principal da aplica√ß√£o
class App {
  public app: express.Application;

  constructor() {
    this.app = express();
    this.config();
    this.routes();
  }

  // Configura√ß√µes do Express
  private config(): void {
    // Middleware para permitir o parsing de JSON no corpo das requisi√ß√µes
    this.app.use(express.json());
  }

  // Define as rotas da aplica√ß√£o
  private routes(): void {
    this.app.get('/', (_req: Request, res: Response) => {
      res.status(200).json({ message: 'API TocaAqui est√° no ar!' });
    });

    // Adicione outras rotas aqui no futuro
    // Ex: this.app.use('/users', userRoutes);
  }

  // Inicia o servidor e sincroniza o banco de dados
  public async start(port: number): Promise<void> {
    try {
      // Sincroniza o banco de dados. 
      // O 'force: true' √© √∫til em desenvolvimento para recriar as tabelas a cada reinicializa√ß√£o.
      // Em produ√ß√£o, voc√™ deve usar 'force: false'.
      await syncDatabase(true); 

      this.app.listen(port, () => {
        console.log(`üöÄ Servidor rodando na porta ${port}`);
        console.log(`üîó Acesse em http://localhost:${port}`);
      });
    } catch (error) {
      console.error('‚ùå Falha ao iniciar o servidor:', error);
      // Encerra o processo se n√£o conseguir conectar ao banco
      process.exit(1); 
    }
  }
}

// --- Ponto de Entrada da Aplica√ß√£o ---

// Define a porta do servidor
const PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3001;

// Cria uma inst√¢ncia da aplica√ß√£o
const server = new App();

// Inicia o servidor
server.start(PORT);

// Importar todos os models
import UserModel from './models/UserModel';
import AddressModel from './models/AddressModel';
import GenreModel from './models/GenreModel';
import InstrumentModel from './models/InstrumentModel';
import EstablishmentModel from './models/EstablishmentModel';
import BandModel from './models/BandModel';
import CommonUserModel from './models/CommonUserModel';
import EstablishmentScheduleModel from './models/EstablishmentScheduleModel';
import BandAvailabilityModel from './models/BandAvailabilityModel';
import { BandBlockModel, EstablishmentBlockModel } from './models/BlockModels';
import BookingModel from './models/BookingModel';
import ContractModel from './models/ContractModel';
import PaymentModel from './models/PaymentModel';
import BandMemberModel from './models/BandMemberModel';
import RatingModel from './models/RatingModel';
import CommentModel from './models/CommentModel';
import FavoriteModel from './models/FavoriteModel';
import {
  BandGenreModel,
  EstablishmentGenreModel,
  BandInstrumentModel,
  EstablishmentInstrumentModel,
} from './models/JunctionModels';
import {
  CompletedShowModel,
  TicketModel,
  BookingHistoryModel,
  CounterProposalModel,
} from './models/ComplementaryModels';

// Configurar associa√ß√µes
setupAssociations();

// Fun√ß√£o para sincronizar o banco de dados
export async function syncDatabase(force: boolean = true) {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso.');
    
    await sequelize.sync({ force });
    console.log(`‚úÖ Banco de dados sincronizado ${force ? '(recriado)' : ''}`);
  
    
    // Se for para recriar, inserir dados b√°sicos
    if (force) {
      await sequelize.query('SET FOREIGN_KEY_CHECKS = 0');
    }
  } catch (error) {
    console.error('‚ùå Erro ao conectar/sincronizar banco de dados:', error);
    throw error;
  }
}

/*// Fun√ß√£o para inserir dados b√°sicos
async function seedDatabase() {
  try {
    // Inserir g√™neros b√°sicos
    const genres = [
      { nome: 'Rock', descricao: 'G√™nero musical caracterizado por guitarra el√©trica, baixo e bateria' },
      { nome: 'Pop', descricao: 'M√∫sica popular contempor√¢nea' },
      { nome: 'Jazz', descricao: 'G√™nero musical que se originou nas comunidades afro-americanas' },
      { nome: 'Blues', descricao: 'G√™nero musical origin√°rio do sul dos Estados Unidos' },
      { nome: 'Reggae', descricao: 'G√™nero musical que se originou na Jamaica' },
      { nome: 'Country', descricao: 'G√™nero musical que se originou no sul dos Estados Unidos' },
      { nome: 'Folk', descricao: 'M√∫sica tradicional de um povo ou pa√≠s' },
      { nome: 'Eletr√¥nica', descricao: 'M√∫sica criada usando instrumentos eletr√¥nicos' },
      { nome: 'Hip Hop', descricao: 'G√™nero musical que se originou nas comunidades afro-americanas' },
      { nome: 'Funk', descricao: 'G√™nero musical que se originou nas comunidades afro-americanas' },
      { nome: 'MPB', descricao: 'M√∫sica Popular Brasileira' },
      { nome: 'Samba', descricao: 'G√™nero musical brasileiro' },
      { nome: 'Forr√≥', descricao: 'G√™nero musical popular no Nordeste do Brasil' },
      { nome: 'Sertanejo', descricao: 'G√™nero musical popular no Brasil' },
      { nome: 'Pagode', descricao: 'Subg√™nero do samba' },
      { nome: 'Ax√©', descricao: 'G√™nero musical popular na Bahia' },
    ];
    
    await GenreModel.bulkCreate(genres);
    console.log('‚úÖ G√™neros musicais inseridos');
    
    // Inserir instrumentos b√°sicos
    const instruments = [
      { nome: 'Guitarra', categoria: 'cordas' },
      { nome: 'Baixo', categoria: 'cordas' },
      { nome: 'Bateria', categoria: 'percussao' },
      { nome: 'Viol√£o', categoria: 'cordas' },
      { nome: 'Teclado', categoria: 'teclas' },
      { nome: 'Piano', categoria: 'teclas' },
      { nome: 'Saxofone', categoria: 'sopro' },
      { nome: 'Trompete', categoria: 'sopro' },
      { nome: 'Violino', categoria: 'cordas' },
      { nome: 'Flauta', categoria: 'sopro' },
      { nome: 'Harm√¥nica', categoria: 'sopro' },
      { nome: 'Caj√≥n', categoria: 'percussao' },
      { nome: 'Pandeiro', categoria: 'percussao' },
      { nome: 'Tri√¢ngulo', categoria: 'percussao' },
      { nome: 'Acordeon', categoria: 'teclas' },
      { nome: 'Microfone', categoria: 'audio' },
      { nome: 'Mesa de Som', categoria: 'audio' },
      { nome: 'Amplificador', categoria: 'audio' },
    ];
    
    await InstrumentModel.bulkCreate(instruments);
    console.log('‚úÖ Instrumentos inseridos');
    
  } catch (error) {
    console.error('‚ùå Erro ao inserir dados b√°sicos:', error);
    throw error;
  }
}*/

// Exportar todos os models
export {
  sequelize,
  UserModel,
  AddressModel,
  GenreModel,
  InstrumentModel,
  EstablishmentModel,
  BandModel,
  CommonUserModel,
  EstablishmentScheduleModel,
  BandAvailabilityModel,
  BandBlockModel,
  EstablishmentBlockModel,
  BookingModel,
  ContractModel,
  PaymentModel,
  BandMemberModel,
  RatingModel,
  CommentModel,
  FavoriteModel,
  BandGenreModel,
  EstablishmentGenreModel,
  BandInstrumentModel,
  EstablishmentInstrumentModel,
  CompletedShowModel,
  TicketModel,
  BookingHistoryModel,
  CounterProposalModel,
};

// Exportar tipos e enums
export { UserType } from './models/UserModel';
export { InstrumentCategory } from './models/InstrumentModel';
export { WeekDay } from './models/EstablishmentScheduleModel';
export { 
  BookingStatus, 
  BookingRequestType, 
  PaymentMethod 
} from './models/BookingModel';
export { ContractStatus } from './models/ContractModel';
export { PaymentType, PaymentStatus } from './models/PaymentModel';
export { RatingTargetType } from './models/RatingModel';
export { InstrumentCondition } from './models/JunctionModels';
export { 
  TicketType, 
  TicketStatus, 
  CounterProposalStatus 
} from './models/ComplementaryModels';